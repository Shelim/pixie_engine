<project name="engine" basedir="../..">
<!--
 *******************************************************************
 * This is main build script for Apache Ant. It handles build commands
 *     from VS Code project (and VS Code project creation as well).
 *     You should never call this file directly, it is already done in
 *     various scripts inside engine.
 * 
 * REQUIRES:
 *     - Javascript engine
 *     - Windows platform
 *     - Apache ANT
 *     - Base path '\_engine'
 * INPUT:
 *     (None)
 * AUTHOR:
 *     Piotr Kosek <piotr@kosek.com>
 * LICENSE:
 *     MIT/X11 License
 * CHANGELOG:
 *     0.2 [November, 16th 2017]:
 *         - Linker is now able to produce DWARF symbols
 *     0.1 [September, 7th 2017]: 
 *         - Initial version
 *******************************************************************
 * CONSTRAINS:
 *     - Drop non-0 return code on error
 *     - Configurable at the top of file
 *     - All config variables tamperable
 *     - No redudancy
 *******************************************************************
 * Copyright (c) 2017 Piotr Kosek
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software
 * and associated documentation files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies
 * or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
 * A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *******************************************************************
-->

	<!-- Add ant-contrib tasks -->
	<taskdef resource="net/sf/antcontrib/antcontrib.properties"/>
	
<!-- START OF INPUT SECTION -->
	
	<!-- Project to build (common for scripts) -->
	<property name="project_to_build" value="unknown" />
	
	<!-- Build variables -->
	<property name="build_typename" value="debug" />
	<property name="build_is_iterative" value="false" />
	<property name="build_is_debug" value="true" />
	<property name="build_is_portable" value="false" />
	<property name="build_is_deploy" value="false" />
	<property name="build_is_final" value="false" />
	<property name="build_is_tester" value="false" />
	
<!-- END OF INPUT SECTION -->
<!-- START OF CONFIGURATION SECTION -->

	<!-- Where we should store dependency for upload -->
	<property name="dependencies_build_path" value="!build/dependency_for_upload/" />
	<!-- Which directory we should pack for depedencies -->
	<property name="dependencies_source_path" value="dependency/" />

	<!-- What is the name of zip file? If you change it here, remember to update download_dependencies.bat as well! -->
	<property name="dependencies_zip_filename" value="depedencies.zip" />
	
<!-- END OF CONFIGURATION SECTION -->
<!-- START OF WIRED CONFIGURATION SECTION -->

	<property name="compiler_binary" value="clang++.exe" />
	<property name="linker_binary" value="lld-link.exe" />
	<property name="resource_compiler_binary" value="windres.exe" />
	<property name="platform_name" value="windows" />
	<property name="platform_ver" value="x64" />
	<property name="executable_extension" value=".exe" />
	<property name="map_extension" value=".map" />
	<property name="binary_filename_raw_pdb" value="pixie_${build_typename}.pdb" />
    <property name="compiler_cmd_linker" value="/NODEFAULTLIB /MANIFEST:EMBED /MACHINE:X64" />
	<property name="compiler_cmd_linker_tester" value="/Subsystem:Console /OPT:NOREF" />
	<property name="compiler_cmd_linker_ntester" value="/Subsystem:Windows" />
	<property name="compiler_cmd_linker_debug" value="/DEBUG" />
	<property name="compiler_cmd_linker_ndebug" value="" />
	<property name="resources_cmd_iterative" value="-DPIXIE_IS_ITERATIVE_BUILD=1" />
	<property name="resources_cmd_niterative" value="-DPIXIE_IS_ITERATIVE_BUILD=0" />
	<property name="resources_cmd_debug" value="-D_MDd -D_DLL -D_DEBUG -DPIXIE_IS_DEBUG_BUILD=1" />
	<property name="resources_cmd_ndebug" value="-D_MD -D_DLL -DNDEBUG -DPIXIE_IS_DEBUG_BUILD=0" />
	<property name="resources_cmd_platform_windows" value="-DPIXIE_WINDOWS=1 -DWINDOWS -DWINAPI_FAMILY=100 -D_M_X64=100 -D_M_AMD64=100 -D_MSC_VER=1910 -D_WIN32 -D_WIN64 -D_WIN32_WINNT=0x0600 -DWINVER=0x0600 -D_MSC_FULL_VER=191025019 -DWIN32_LEAN_AND_MEAN -DVC_EXTRALEAN -D_USING_V110_SDK71_ -DWXUSINGDLL -D__WXMSW__" />
	<property name="resources_cmd_tester" value="-DPIXIE_IS_TESTER_BUILD=1" />
	<property name="resources_cmd_ntester" value="-DPIXIE_IS_TESTER_BUILD=0" />
    <property name="resources_cmd_final" value="-DPIXIE_IS_FINAL_BUILD=1" />
	<property name="resources_cmd_nfinal" value="-DPIXIE_IS_FINAL_BUILD=0" />
	<property name="resources_cmd_deploy" value="-DPIXIE_IS_DEPLOY_BUILD=1" />
	<property name="resources_cmd_ndeploy" value="-DPIXIE_IS_DEPLOY_BUILD=0" />
	<property name="resources_cmd_portable" value="-DPIXIE_IS_PORTABLE_BUILD=1" />
	<property name="resources_cmd_nportable" value="-DPIXIE_IS_PORTABLE_BUILD=0" />
	<property name="resources_cmd_common" value="-DGLEW_STATIC -DAS_USE_FLOAT=0 -DSTATIC_LIB -DUNICODE -D_UNICODE --target=pe-x86-64" />
	<property name="resources_cmd_cereal_xml_string_value" value="pixie" />

<!-- END OF WIRED CONFIGURATION SECTION -->
<!-- START OF INCLUDE SECTION -->
	
	<import file="../common/ant.xml" />
	
<!-- END OF INCLUDE SECTION -->
<!-- START OF ADDITIONAL CONFIGURATION SECTION -->

	<property name="build_path_resources" value="${build_path_autogen}" />
	<property name="build_path_resources_file" value="${build_path_resources}/resources_${build_dirname}.hpp" />

<!-- END OF ADDITIONAL CONFIGURATION SECTION -->
<!-- START OF HELPER SECTION -->
	
<!-- Replaces tags inside given file (some are included in common/ant) -->
	<target name="replace_variables" depends="replace_variables_common">
		<replace file="${replace_variables.file}" token="$WINDOWS_GAME_APP_DIR$" value="${manifest_windows.game_app_dir}" />
		
		<replace file="${replace_variables.file}" token="$RESOURCES_COMPANY$" value="${manifest_windows.resources_company}" />
		<replace file="${replace_variables.file}" token="$RESOURCES_INTERNAL$" value="${manifest_windows.resources_internal}" />
		<replace file="${replace_variables.file}" token="$RESOURCES_COPYRIGHTS$" value="${manifest_windows.resources_copyrights}" />
		<replace file="${replace_variables.file}" token="$RESOURCES_PRODUCT$" value="${manifest_windows.resources_product}" />
		
		<replace file="${replace_variables.file}" token="$INSTALL_SHORTCUT$" value="${manifest_windows.install_shortcut}" />
		<replace file="${replace_variables.file}" token="$INSTALL_REGISTRY$" value="${manifest_windows.install_registry}" />
		<replace file="${replace_variables.file}" token="$INSTALL_DIR$" value="${manifest_windows.install_dir}" />
		<replace file="${replace_variables.file}" token="$INSTALL_RUN$" value="${manifest_windows.executable_filename}" />
		<replace file="${replace_variables.file}" token="$INSTALLER_FILENAME$" value="${manifest_windows.installer_filename}" />
		
		<replace file="${replace_variables.file}" token="$BINARY_FILENAME$" value="${manifest_windows.executable_filename}" />
		<replace file="${replace_variables.file}" token="$BINARY_EXTENSION$" value="${executable_extension}" />
	</target>
	
<!-- Copy binaries into desginated directory -->	
	<target name="binary_base">		
	
		<condition property="binary_base.debug" value="debug" else="release">
			<istrue value="${build_is_debug}" />
		</condition>
		
		<pathconvert property="binary_base_depedencies" pathsep=",">
			<dirset dir="dependency/library" includes="*/content/${platform_fullname}/${binary_base.debug}" />
		</pathconvert>
		
		<copy todir="${binary_base.output_path}" preservelastmodified="true" overwrite="true">
			<multirootfileset basedirs="${binary_base_depedencies}" type="file" includes="**" />
		</copy>
        
	</target>
	
<!-- Populate resources file and store it in build_path so it is accessible for include inside /code/src/windows/resources.rc -->
	<target name="populate_resources">
		<mkdir dir="${build_path_resources}" />
		<copy file="build/windows/resources.hpp" tofile="${build_path_resources_file}" preservelastmodified="true" overwrite="true" />
		<antcall target="replace_variables">
			<param name="replace_variables.file" value="${build_path_resources_file}" />
		</antcall>
		
		<!-- Copy manifest-related files to resources directory -->
		<copy todir="${build_path_resources}" preservelastmodified="true" overwrite="true">
			<fileset dir="${path_manifest_platform}"/>
			<fileset dir="${path_manifest_common}"/>
		</copy>
	</target>
	
<!-- Builds resources file *.rc into *.res -->
	<target name="build_resources">
		<condition property="build_resources.iterative_arg" value="${resources_cmd_iterative}" else="${resources_cmd_niterative}">
			<istrue value="${build_is_iterative}" />
		</condition>
		<condition property="build_resources.debug_arg" value="${resources_cmd_debug}" else="${resources_cmd_ndebug}">
			<istrue value="${build_is_debug}" />
		</condition>
		<switch value="${platform_name}">
			<case value="windows">
				<property name="build_resources.platform" value="${resources_cmd_platform_windows}" />
			</case>
			<default>
				<fail message="Missing platform for this compiler run!"/>
			</default>
		</switch>
		<condition property="build_resources.tester_arg" value="${resources_cmd_tester}" else="${resources_cmd_ntester}">
			<istrue value="${build_is_tester}" />
		</condition>
		<condition property="build_resources.final_arg" value="${resources_cmd_final}" else="${resources_cmd_nfinal}">
			<istrue value="${build_is_final}" />
		</condition>
		<condition property="build_resources.deploy_arg" value="${resources_cmd_deploy}" else="${resources_cmd_ndeploy}">
			<istrue value="${build_is_deploy}" />
		</condition>
		<condition property="build_resources.portable_arg" value="${resources_cmd_portable}" else="${resources_cmd_nportable}">
			<istrue value="${build_is_portable}" />
		</condition>
			
		<dirset dir="${basedir}" id="build_resources.includes">
			<include name="${code_dependency_include}" />
			<include name="${code_dependency_src}" />
		</dirset>
		
		<pathconvert property="build_resources.includes" refid="build_resources.includes" pathsep="&quot; &quot;-I" />
	
		<apply executable="${resource_compiler_binary}" relative="false" dest="${build_path_obj_engine}" failonerror="true" failifexecutionfails="true" skipemptyfilesets="false" parallel="false" type="file" addsourcefile="true" verbose="true">
			<mapper type="regexp" from="^(.*)\.(rc)$$" to="\1.res"/>
			<fileset dir="${code_engine_src}" casesensitive="true">
				<include name="**/*.rc" />
			</fileset>
			<arg value="-DCEREAL_XML_STRING_VALUE=\&quot;${resources_cmd_cereal_xml_string_value}\&quot;" />
			<arg value="-DPIXIE_PROJECT_NAME=\&quot;${project_to_build}\&quot;" />
			<arg line="${resources_cmd_common}" />
			<arg line="${build_resources.iterative_arg}" />
			<arg line="${build_resources.debug_arg}" />
			<arg line="${build_resources.platform}" />
			<arg line="${build_resources.final_arg}" />
			<arg line="${build_resources.tester_arg}" />
			<arg line="${build_resources.deploy_arg}" />
			<arg line="${build_resources.portable_arg}" />
			<arg value="-I${basedir}/${code_engine_include}" />
			<arg value="-I${basedir}/${code_project_include}" />
			<arg value="-I${basedir}/${build_path_autogen}" />
			<arg line="&quot;-I${build_resources.includes}&quot;" />
			<arg value="-J" />
			<arg value="rc" />
			<arg value="-O" />
			<arg value="coff" />
			<arg value="-i" />
			<srcfile />
			<arg value="-o" />
			<targetfile />
		</apply>
	</target>
    
<!-- Link all *.o in given directory and store results as executable -->	
	<target name="link_all">
		<dirset dir="${basedir}" id="compile.libraries_path">
			<include name="${code_dependency_lib}" />
		</dirset>
		
		<pathconvert property="compile.libraries_path" refid="compile.libraries_path" pathsep="&quot; /LIBPATH:&quot;" />
	
		<mkdir dir="${build_path_map}" />
		
		<fileset dir="${basedir}" id="compile.libraries"> 
			<include name="${code_dependency_lib}/lib*.a" /> 
			<include name="${code_dependency_lib}/*.lib" /> 
		</fileset> 
		
		<pathconvert property="compile.libraries" refid="compile.libraries" pathsep="&quot; &quot;">
			<compositemapper>
				<mapper type="regexp" from="([^/^\\]+).lib$$" to="\1.lib"/>
				<mapper type="regexp" from="lib([^/^\\]+).a$$" to="lib\1.a"/>
			</compositemapper>
		</pathconvert>
		
		<condition property="link_all.tester_arg" value="${compiler_cmd_linker_tester}" else="${compiler_cmd_linker_ntester}">
			<istrue value="${build_is_tester}" />
		</condition>
		<condition property="link_all.debug_arg" value="${compiler_cmd_linker_debug}" else="${compiler_cmd_linker_ndebug}">
			<istrue value="${build_is_debug}" />
		</condition>
        
        <property name="link_all.path_map" location="${basedir}/${build_path_map}/${map_filename_raw}"/>
	
		<apply executable="${linker_binary}" relative="false" failonerror="true" failifexecutionfails="true" skipemptyfilesets="false" parallel="true" type="file" addsourcefile="true" verbose="true">
			<fileset dir="${build_path_obj}" casesensitive="true">
				<include name="**/*.o" />
				<include name="**/*.obj" />
				<include name="**/*.res" />
			</fileset>
			<arg line="${compiler_cmd_linker}" />
			<arg line="${link_all.debug_arg}" />
			<arg line="${link_all.tester_arg}" />
			<arg line="/LLDMAP:&quot;${link_all.path_map}&quot;" />
			<arg line="/LIBPATH:&quot;${compile.libraries_path}&quot;" />
			<arg line="/OUT:&quot;${basedir}/${build_path_binary}/${binary_filename_raw}&quot;" />
			<!-- Workaround: SDL2main.lib has to be included before SDL2.lib -->
			<srcfile />
			<arg line="&quot;SDL2main.lib&quot;" />
			<arg line="&quot;${compile.libraries}&quot;" />
		</apply>
       
	</target>
	
<!-- Self explaining :-) -->
	<target name="copy_executable_to_output">
		<copy file="${build_path_binary}/${binary_filename_raw}" tofile="${output_path}/${manifest_windows.executable_filename}" preservelastmodified="true" overwrite="true" />
	</target>
	
<!-- Helper target for below; Pack executable only if we're not building debug nor dll -->
	<target name="check_if_can_pack_executable">
		<condition property="can_pack_executable">
		<!--<istrue value="${build_is_deploy}" />-->
			<istrue value="false" />
		</condition>
	</target>
	
<!-- Pack executable with UPX, greatly reducing its size -->
	<target name="pack_executable" depends="check_if_can_pack_executable" if="can_pack_executable">	
		<exec executable="${basedir}/dependency/other/upxw/${platform_name}/upx.exe" failonerror="false">
			<arg value="--ultra-brute"/>
			<arg value="${basedir}/${output_path}/${manifest_windows.executable_filename}"/>
		</exec>
	</target>
	
<!-- Copy content into target dir -->	
	<target name="content">
		<antcall target="binary_base">
			<param name="binary_base.output_path" value="${output_path}"/>
		</antcall>
		<antcall target="binary_base">
			<param name="binary_base.output_path" value="${build_path_binary}"/>
		</antcall>
		<antcall target="content_base">
			<param name="content_base.output_path" value="${build_path_binary}"/>
		</antcall>
		<antcall target="content_base">
			<param name="content_base.output_path" value="${output_path}"/>
		</antcall>
	</target>
	
<!-- Helper target for below; Build installer only if we're deploy non-portable -->
	<target name="check_if_deploy_installer">
		<condition property="is_deploy_installer">
			<and>
				<istrue value="${build_is_deploy}" />
				<isfalse value="${build_is_portable}" />
			</and>
		</condition>
	</target>
	
<!-- Create Windows installer file -->
	<target name="build_installer" depends="check_if_deploy_installer" if="is_deploy_installer">
	
		<mkdir dir="${build_path_installer}"/>
		<delete includeemptydirs="true">
			<fileset dir="${build_path_installer}" includes="**/*" />
		</delete>	
		<mkdir dir="${build_path_installer}"/>
		
		<copy todir="${build_path_installer}" preservelastmodified="true" overwrite="true">
			<fileset dir="${project_dirname}manifest/${platform_name}/"/>
		</copy>
		
		<copy file="build/${platform_name}/installer.nsi" tofile="${build_path_installer}/installer.nsi" preservelastmodified="true" overwrite="true" />
		
		<local name="replace_variables.file" />
		<property name="replace_variables.file" value="${build_path_installer}/installer.nsi" />
		<replace file="${replace_variables.file}" token="$PATH_TO_FILES$" value="${basedir}/${output_path}"/>
		
		<antcall target="replace_variables">
			<param name="replace_variables.file" value="${build_path_installer}/installer.nsi" />
		</antcall>
		
		<exec executable="${basedir}/dependency/other/nsis/makensis.exe" failonerror="true">
			<arg value="${build_path_installer}/installer.nsi"/>
		</exec>
				
		<mkdir dir="${output_path_ready}" />
		<copy file="${build_path_installer}${manifest_windows.installer_filename}" tofile="${output_path_ready}/${manifest_windows.installer_filename}" preservelastmodified="true" overwrite="true" />
		
	</target>
	
<!-- Helper target for below; Pack executables into zip only if we're deploy portable -->
	<target name="check_if_deploy_portable">
		<condition property="is_deploy_portable">
			<and>
				<istrue value="${build_is_deploy}" />
				<istrue value="${build_is_portable}" />
			</and>
		</condition>
	</target>
	
<!-- Pack executables into zip -->
	<target name="build_portable" depends="check_if_deploy_portable" if="is_deploy_portable">
				
		<mkdir dir="${output_path_ready}" />
		<zip destfile="${output_path_ready}/${manifest_windows.portable_filename}" basedir="${output_path}" />
		
	</target>
	
<!-- END OF HELPER SECTION -->
<!-- START OF CALLABLE SECTION -->
	
	<!-- Pack and upload depedencies directory to server -->
	<target name="pack_dependencies">
	
		<!-- Delete old dependency packed directory (do not fail on error, the project may be not here!) -->
		<delete dir="${dependencies_build_path}" failonerror="false" />
		<!-- Create new dependency packed directory -->
		<mkdir dir="${dependencies_build_path}"/>
	
		<!-- Compress depedencies -->
		<zip destfile="${dependencies_build_path}/${dependencies_zip_filename}" basedir="${dependencies_source_path}" update="true" compress="true" whenempty="create" comment="Unpack this to '_engine/dependency'" level="7" />
	
	</target>

	<!-- Prebuild step for iterative build -->
	<target name="prebuild_iterative" depends="clean_build, clean_output, increment_build_number, populate_autogen, populate_resources, prepare_obj_directories, build_resources" />
	
	<!-- Build full -->
	<target name="build_full" depends="clean_build, clean_output, increment_build_number, populate_autogen, populate_resources, prepare_obj_directories, build_resources, compile, link_all, copy_executable_to_output, pack_executable, content, build_installer, build_portable" />
	
	<!-- Postbuild step for iterative build -->
	<target name="postbuild_iterative" depends="link_all, copy_executable_to_output, content" />
	
<!-- END OF CALLABLE SECTION -->
	
</project>