#import PIXIE_PROJECT_TO_BUILD
#import PIXIE_ADDITIONAL_INCLUDES
#import PIXIE_ADDITIONAL_LIBRARIES

.BuildRoot = '..\..'

.ClangBasicCmd = '-D_DLL -g -fstandalone-debug -gcodeview -ftemplate-backtrace-limit=0 -O0 -D_DEBUG -DPIXIE_IS_ITERATIVE_BUILD=1 -DPIXIE_IS_DEBUG_BUILD=1 -DPIXIE_IS_FINAL_BUILD=0 -DPIXIE_IS_DEPLOY_BUILD=0 -DPIXIE_IS_PORTABLE_BUILD=0 -DPIXIE_IS_TESTER_BUILD=0 -nostdinc -nostdinc++ -w -fno-strict-aliasing -std=gnu++14 -DGLEW_STATIC -DAS_USE_FLOAT=0 -DSTATIC_LIB -DUNICODE -D_UNICODE -DPIXIE_PROJECT_NAME="\"$PIXIE_PROJECT_TO_BUILD$\"" -DCEREAL_XML_STRING_VALUE="\"pixie\"" -DBOOST_DI_CFG_DIAGNOSTICS_LEVEL=2'
#if __WINDOWS__
.ClangAdditionalCmd = '-D_MDd -ffunction-sections -DPIXIE_WINDOWS=1 -DWINDOWS -DWINAPI_FAMILY=100 -D_M_X64=100 -D_M_AMD64=100 -D_MSC_VER=1910 -D_WIN32 -D_WIN64 -D_WIN32_WINNT=0x0600 -DWINVER=0x0600 -D_MSC_FULL_VER=191025019 -DWIN32_LEAN_AND_MEAN -DVC_EXTRALEAN -D_USING_V110_SDK71_ -DWXUSINGDLL -D__WXMSW__ -D_WINSOCK_DEPRECATED_NO_WARNINGS'
#endif

.ClangIncludes = '$PIXIE_ADDITIONAL_INCLUDES$ -I$BuildRoot$\_engine\code\include -I$BuildRoot$\$PIXIE_PROJECT_TO_BUILD$\code\include -I$BuildRoot$\$PIXIE_PROJECT_TO_BUILD$\!build\autogen'

Settings
{
	.CachePath = "$BuildRoot$\$PIXIE_PROJECT_TO_BUILD$\!build\fastbuild_cache\"
}

Compiler( 'Clang' )
{
	.Root = '$BuildRoot$\_engine\dependency\other\llvm\windows'
    .Executable = '$Root$\bin\clang++.exe'
}

ObjectList( 'engine_code' )
{
	.Compiler = 'Clang'
	.CompilerOptions = '$ClangBasicCmd$ $ClangAdditionalCmd$ $ClangIncludes$ -c %1 -o %2'
	.CompilerOutputPath = "$BuildRoot$\$PIXIE_PROJECT_TO_BUILD$\!build\windows_x64_iterative\obj\engine"
	.CompilerInputPath = '$BuildRoot$\_engine\code\src'
	.CompilerInputPattern = '*.cpp'
}

ObjectList( 'dependency_code_cpp' )
{
	.Compiler = 'Clang'
	.CompilerOptions = '$ClangBasicCmd$ $ClangAdditionalCmd$ $ClangIncludes$ -c %1 -o %2'
	.CompilerOutputPath = "$BuildRoot$\$PIXIE_PROJECT_TO_BUILD$\!build\windows_x64_iterative\obj\dependency"
	.CompilerInputPath = '$BuildRoot$\_engine\dependency\library'
	.CompilerInputPattern = '*.cpp'
	.CompilerInputExcludePattern = '*include*'
}

ObjectList( 'dependency_code_c' )
{
	.Compiler = 'Clang'
	.CompilerOptions = '$ClangBasicCmd$ $ClangAdditionalCmd$ $ClangIncludes$ -c %1 -o %2'
	.CompilerOutputPath = "$BuildRoot$\$PIXIE_PROJECT_TO_BUILD$\!build\windows_x64_iterative\obj\dependency"
	.CompilerInputPath = '$BuildRoot$\_engine\dependency\library'
	.CompilerInputPattern = '*.c'
	.CompilerInputExcludePattern = '*include*'
}

ObjectList( 'target_code' )
{
	.Compiler = 'Clang'
	.CompilerOptions = '$ClangBasicCmd$ $ClangAdditionalCmd$ $ClangIncludes$ -c %1 -o %2'
	.CompilerOutputPath = "$BuildRoot$\$PIXIE_PROJECT_TO_BUILD$\!build\windows_x64_iterative\obj\project"
	.CompilerInputPath = '$BuildRoot$\$PIXIE_PROJECT_TO_BUILD$\code\src'
	.CompilerInputPattern = '*.cpp'
}

Executable('pixie_debug')
{
	.Linker = 'Clang-Linker'
	.LinkerOutput = '$BuildRoot$\$PIXIE_PROJECT_TO_BUILD$\!build\fastbuild_bin\pixie_debug.exe'
	.LinkerOptions = '/Subsystem:Windows /NODEFAULTLIB /MANIFEST:EMBED /debug $PIXIE_ADDITIONAL_LIBRARIES$ /OUT:%2 %1'
	.Libraries = { 'engine_code', 'dependency_code_cpp', 'dependency_code_c', 'target_code' }
}

Alias( 'all' )
{
	.Targets = { 'engine_code', 'dependency_code_cpp', 'dependency_code_c', 'target_code' }
}