<project name="common" basedir="../..">
<!--
 *******************************************************************
 * This is common support build script for Apache Ant. It handles build 
 *     events that are platform-indepdent to remove redundancy in 
 *     You should never call this file directly, it is already done in
 *     platform's ant.xml
 * 
 * REQUIRES:
 *     - '\_engine\build\windows\build_project_msvc_actual.js' for creating msvc project
 *     - Javascript engine
 *     - Apache ANT
 *     - Base path '\_engine'
 * INPUT:
 *     (None)
 * AUTHOR:
 *     Piotr Kosek <piotr@kosek.com>
 * LICENSE:
 *     MIT/X11 License
 * CHANGELOG:
 *     0.1 [September, 7th 2017]: 
 *         - Initial version
 *******************************************************************
 * CONSTRAINS:
 *     - Drop non-0 return code on error
 *     - Configurable at the top of file
 *     - All config variables tamperable
 *     - No redudancy
 *******************************************************************
 * Copyright (c) 2017 Piotr Kosek
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software
 * and associated documentation files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies
 * or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
 * A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *******************************************************************
-->
	
<!-- Apply dir name into paths -->
	<property name="platform_fullname" value="${platform_name}_${platform_ver}" />
	
<!-- Build output path full name -->
	
	<property name="build_dirname" value="${platform_fullname}_${build_typename}" />
	<property name="project_dirname" value="../${project_to_build}/" />
	<property name="code_engine" value="code" />
	<property name="code_engine_include" value="${code_engine}/include/" />
	<property name="code_engine_src" value="${code_engine}/src/" />
	<property name="code_project" value="${project_dirname}/code" />
	<property name="code_project_include" value="${code_project}/include/" />
	<property name="code_project_src" value="${code_project}/src/" />
	<property name="code_dependency" value="dependency/library" />
	<property name="code_dependency_include" value="${code_dependency}/*/include" />
	<condition property="code_dependency_lib" value="${code_dependency}/*/lib/${platform_fullname}/debug" else="${code_dependency}/*/lib/${platform_fullname}/release">
		<istrue value="${build_is_debug}" />
	</condition>
	<property name="code_dependency_src" value="${code_dependency}/*/src" />
	<property name="compiler_cmd_iterative" value="-DPIXIE_IS_ITERATIVE_BUILD=1" />
	<property name="compiler_cmd_niterative" value="-DPIXIE_IS_ITERATIVE_BUILD=0" />
	<property name="compiler_cmd_debug" value="-D_MT -D_DLL -g -fstandalone-debug -glldb -O0 -D_DEBUG -DPIXIE_IS_DEBUG_BUILD=1" />
	<!--
	<property name="compiler_cmd_debug" value="-D_MT -D_DLL -g -fstandalone-debug -gcodeview -O0 -D_DEBUG -DPIXIE_IS_DEBUG_BUILD=1" />
	-->
	<property name="compiler_cmd_ndebug" value="-D_MT -D_DLL -s -O2 -fexpensive-optimizations -DNDEBUG -DPIXIE_IS_DEBUG_BUILD=0" />
	<property name="compiler_cmd_platform_windows" value="-ffunction-sections -DPIXIE_WINDOWS=1 -DWINDOWS -D_MSC_VER=1910 -D_MSC_FULL_VER=191025019 -DWIN32_LEAN_AND_MEAN -DVC_EXTRALEAN -D_USING_V110_SDK71_ -DWXUSINGDLL -D__WXMSW__" />
	<property name="compiler_cmd_final" value="-DPIXIE_IS_FINAL_BUILD=1" />
	<property name="compiler_cmd_nfinal" value="-DPIXIE_IS_FINAL_BUILD=0" />
	<property name="compiler_cmd_deploy" value="-DPIXIE_IS_DEPLOY_BUILD=1" />
	<property name="compiler_cmd_ndeploy" value="-DPIXIE_IS_DEPLOY_BUILD=0" />
	<property name="compiler_cmd_portable" value="-DPIXIE_IS_PORTABLE_BUILD=1" />
	<property name="compiler_cmd_nportable" value="-DPIXIE_IS_PORTABLE_BUILD=0" />
	<property name="compiler_cmd_common" value="-nostdinc -nostdinc++ -w -fno-strict-aliasing -std=gnu++14 -DGLEW_STATIC -DAS_USE_FLOAT=0 -DSTATIC_LIB -DUNICODE -D_UNICODE" />
	<property name="compiler_cmd_cereal_xml_string_value" value="pixie" />
	<property name="build_path" value="${project_dirname}!build/${build_dirname}/" />
	<property name="build_path_installer" value="${project_dirname}!build/${build_dirname}_installer/" />
	<property name="build_path_binary" value="${build_path}bin" />
	<property name="build_path_map" value="${build_path}map" />
	<property name="build_path_common" value="${build_path}common" />
	<property name="build_path_obj" value="${build_path}obj/" />
	<property name="build_path_obj_engine" value="${build_path_obj}/engine" />
	<property name="build_path_obj_project" value="${build_path_obj}/project" />
	<property name="build_path_obj_dependency" value="${build_path_obj}/dependency" />
	<property name="build_path_build_number" value="${build_path_common}/build_number.ant" />
	<property name="build_path_changelog" value="${project_dirname}/_changelog/" />
	<property name="build_path_source_build_number" value="${build_path_changelog}/build_number.ant" />
	<property name="build_path_autogen" value="${project_dirname}!build/autogen" />
	<property name="build_path_autogen_file" value="${build_path_autogen}/autogen_${build_dirname}.cc" />
	<property name="populate_autogen_script_path" location="build/common/populate_autogen_actual.js" />
	<property name="binary_filename_raw" value="pixie_${build_typename}${executable_extension}" />
	<property name="output_path" value="${project_dirname}!output/${build_dirname}" />
	<property name="output_path_ready" value="${project_dirname}!output/${build_dirname}_ready" />
	<property name="path_manifest_platform" value="${project_dirname}manifest/${platform_name}" />
	<property name="path_manifest_common" value="${project_dirname}manifest/common" />
	<property file="${build_path_build_number}" />
	<xmlproperty file="${build_path_changelog}/version.xml" />
	<xmlproperty file="${path_manifest_platform}/manifest.xml" />
	<xmlproperty file="${path_manifest_common}/manifest.xml" />
	
<!-- Replaces tags inside given file (platform may include more of them!) -->
	<target name="replace_variables_common">
		<condition property="is_iterative_build_num" value="1" else="0">
			<istrue value="${build_is_iterative}" /> 
		</condition>
		<condition property="is_debug_build_num" value="1" else="0">
			<istrue value="${build_is_debug}" /> 
		</condition>
		<condition property="is_portable_build_num" value="1" else="0">
			<istrue value="${build_is_portable}"/> 
		</condition>
		<condition property="is_deploy_build_num" value="1" else="0">
			<istrue value="${build_is_deploy}"/> 
		</condition>
	
		<replace file="${replace_variables.file}" token="$IS_ITERATIVE_BUILD$" value="${is_iterative_build_num}" />
		<replace file="${replace_variables.file}" token="$IS_DEBUG_BUILD$" value="${is_debug_build_num}" />
		<replace file="${replace_variables.file}" token="$IS_PORTABLE_BUILD$" value="${is_portable_build_num}" />
		<replace file="${replace_variables.file}" token="$IS_DEPLOY_BUILD$" value="${is_deploy_build_num}" />
		
		<replace file="${replace_variables.file}" token="$VERSION_MAJOR$" value="${version.major}" />
		<replace file="${replace_variables.file}" token="$VERSION_MINOR$" value="${version.minor}" />
		<replace file="${replace_variables.file}" token="$VERSION_REVISION$" value="${version.revision}" />
		<replace file="${replace_variables.file}" token="$VERSION_BUILD$" value="${build.number}" />
		
		<replace file="${replace_variables.file}" token="$PLATFORM_FULLNAME$" value="${platform_fullname}" />
		
		<replace file="${replace_variables.file}" token="$FULL_NAME$" value="${manifest_common.full_name}" />
		<replace file="${replace_variables.file}" token="$UNIX_NAME$" value="${project_to_build}" />
	</target>
	
<!-- Increment and store new build version (storing in build_path because we may run concurrent builds...) -->
	<target name="increment_build_number">
		<buildnumber file="${build_path_source_build_number}" />
		<copy file="${build_path_source_build_number}" tofile="${build_path_build_number}" />
	</target>
	
<!-- Populate autogen file and store it in build_path so it is accessible for include inside /code/src/autogen.cpp -->
	<target name="populate_autogen">
		<mkdir dir="${build_path_autogen}" />
		<copy file="build/common/autogen.cc" tofile="${build_path_autogen_file}" preservelastmodified="true" overwrite="true" />
		<antcall target="replace_variables">
			<param name="replace_variables.file" value="${build_path_autogen_file}" />
		</antcall>
		<script language="javascript" src="${populate_autogen_script_path}" />
	</target>
	
<!-- Compile single source file and store results in target obj dir -->
	<target name="compile_file">
		<condition property="compile_file.iterative_arg" value="${compiler_cmd_iterative}" else="${compiler_cmd_niterative}">
			<istrue value="${build_is_iterative}" />
		</condition>
		<condition property="compile_file.debug_arg" value="${compiler_cmd_debug}" else="${compiler_cmd_ndebug}">
			<istrue value="${build_is_debug}" />
		</condition>
		<switch value="${platform_name}">
			<case value="windows">
				<property name="compile_file.platform" value="${compiler_cmd_platform_windows}" />
			</case>
			<default>
				<fail message="Missing platform for this compiler run!"/>
			</default>
		</switch>
		<condition property="compile_file.final_arg" value="${compiler_cmd_final}" else="${compiler_cmd_nfinal}">
			<istrue value="${build_is_final}" />
		</condition>
		<condition property="compile_file.deploy_arg" value="${compiler_cmd_deploy}" else="${compiler_cmd_ndeploy}">
			<istrue value="${build_is_deploy}" />
		</condition>
		<condition property="compile_file.portable_arg" value="${compiler_cmd_portable}" else="${compiler_cmd_nportable}">
			<istrue value="${build_is_portable}" />
		</condition>
			
		<dirset dir="${basedir}" id="compile_file.includes">
			<include name="${code_dependency_include}" />
			<include name="${code_dependency_src}" />
		</dirset>
		
		<pathconvert property="compile_file.includes" refid="compile_file.includes" pathsep="&quot; &quot;-I" />
	
		<property name="compile_file.source_file_rel" value="${compile_file.source_file}" relative="yes" basedir="${basedir}/${compile_directory.source}" />
		
		<echo message="Compilling ${compile_file.source_file_rel}..." />
		
		<apply executable="${compiler_binary}" relative="false" dest="${compile_directory.destination}" failonerror="true" failifexecutionfails="true" skipemptyfilesets="false" parallel="false" type="file" addsourcefile="true" verbose="true">
			<mapper type="regexp" from="^(.*)\.(c|cpp)$$" to="\1.o"/>
			<fileset dir="${compile_directory.source}">
				<include name="${compile_file.source_file_rel}" />
			</fileset>
			<arg value="-DCEREAL_XML_STRING_VALUE=\&quot;${compiler_cmd_cereal_xml_string_value}\&quot;" />
			<arg value="-DPIXIE_PROJECT_NAME=\&quot;${project_to_build}\&quot;" />
			<arg line="${compiler_cmd_common}" />
			<arg line="${compile_file.iterative_arg}" />
			<arg line="${compile_file.debug_arg}" />
			<arg line="${compile_file.platform}" />
			<arg line="${compile_file.final_arg}" />
			<arg line="${compile_file.deploy_arg}" />
			<arg line="${compile_file.portable_arg}" />
			<arg value="-I${basedir}/${code_engine_include}" />
			<arg value="-I${basedir}/${code_project_include}" />
			<arg value="-I${basedir}/${build_path_autogen}" />
			<arg line="&quot;-I${compile_file.includes}&quot;" />
			<arg value="-c" />
			<srcfile />
			<arg value="-o" />
			<targetfile />
		</apply>

		<echo message="Compilling ${compile_file.source_file_rel}... [DONE!]" />
	</target>
	
<!-- Calculate number of CPU cores on given platform -->
	<target name="get_cores">
		<property environment="env"/>
		<!-- support for Windows -->
		<condition property="cores.count" value="${env.NUMBER_OF_PROCESSORS}">
			<os family="windows" />
		</condition>
		<!-- support for Linux and Solaris (package SUNWgnu-coreutils is required) -->
		<exec executable="nproc" outputproperty="cores.count" os="Linux,SunOS,Solaris">
			<arg value="--all"/>
		</exec>
		<!-- support for Mac OS X -->
		<exec executable="sysctl" outputproperty="cores.count" os="Mac OS X">
			<arg value="-n"/>
			<arg value="hw.ncpu"/>
		</exec>
		<echo message="Number of cores: ${cores.count}"/>
	</target>
	
<!-- Compile all sources in given directory and store results in target obj dir -->
	<target name="compile_directory" depends="get_cores">
		<foreach target="compile_file" param="compile_file.source_file" inheritall="true" inheritrefs="true" parallel="true" maxThreads="${cores.count}">
			<fileset dir="${compile_directory.source}" casesensitive="true">
				<include name="${compile_directory.source_matcher}/*.cpp" />
				<include name="${compile_directory.source_matcher}/*.c" />
			</fileset>
		</foreach>
	</target>
	
	<target name="prepare_obj_directories">
		<mkdir dir="${build_path_obj}" />
		
		<mkdir dir="${build_path_obj_engine}" />
		<copy todir="${build_path_obj_engine}" includeEmptyDirs="true"> 
			<fileset dir="${code_engine_src}"> 
				<include name="**" /> 
				<type type="dir" />
			</fileset> 
		</copy>
		
		<mkdir dir="${build_path_obj_project}" />
		<copy todir="${build_path_obj_project}" includeEmptyDirs="true"> 
			<fileset dir="${code_project_src}"> 
				<include name="**" /> 
				<type type="dir" />
			</fileset> 
		</copy>
		
		<mkdir dir="${build_path_obj_dependency}" />
		<copy todir="${build_path_obj_dependency}" includeEmptyDirs="true"> 
			<fileset dir="${code_dependency}"> 
				<include name="*/src/**" /> 
				<type type="dir" />
			</fileset> 
		</copy>
		
		<mkdir dir="${build_path_binary}" />
	</target>
	
<!-- Do the actual compilation -->
	<target name="compile">
		
		<antcall target="compile_directory">
			<param name="compile_directory.source" value="${code_engine_src}" />
			<param name="compile_directory.source_matcher" value="**" />
			<param name="compile_directory.destination" value="${build_path_obj_engine}" />
		</antcall>
		<antcall target="compile_directory">
			<param name="compile_directory.source" value="${code_project_src}" />
			<param name="compile_directory.source_matcher" value="**" />
			<param name="compile_directory.destination" value="${build_path_obj_project}" />
		</antcall>
		<antcall target="compile_directory">
			<param name="compile_directory.source" value="${code_dependency}" />
			<param name="compile_directory.source_matcher" value="*/src/**" />
			<param name="compile_directory.destination" value="${build_path_obj_dependency}" />
		</antcall>
	</target>
	
<!-- Copy content to target directory -->
	<target name="content_base">
		<mkdir dir="${content_base.output_path}/content" />
		<copy todir="${content_base.output_path}/content" preservelastmodified="true" overwrite="true" force="true" includeEmptyDirs="true">
			<fileset dir="content" />
			<fileset dir="${project_dirname}content" />
		</copy>
	</target>
	
<!-- Clean output directory for given build -->
	<target name="clean_output">
		<mkdir dir="${output_path}"/>
		<delete includeemptydirs="true">
			<fileset dir="${output_path}" includes="**/*" />
		</delete>
		<mkdir dir="${output_path}"/>
	</target>
	
<!-- Clean build directory for given build -->
	<target name="clean_build">
		<mkdir dir="${build_path}"/>
		<delete includeemptydirs="true">
			<fileset dir="${build_path}" includes="**/*" />
		</delete>
		<mkdir dir="${build_path}"/>
	</target>
	
	
</project>